{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","myStyle","color","mode","href","style","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","redMode","backgroundColor","borderColor","htmlFor","toggleMode","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","Heading","rows","value","onChange","event","target","console","log","newText","showAlert","nText","document","getElementById","select","navigator","clipboard","writeText","length","split","App","setMode","_useState3","_useState4","setAlert","body","Components_Alert","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.72862632.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { a } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    let myStyle = {\r\n        color: 'white'\r\n    }\r\n    let styles = {\r\n        backgroundColor: '#541212',\r\n        color: 'white',\r\n        borderColor: '#541212'\r\n    }\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className={`navbar-brand text-${props.mode === 'light' ? 'dark' : 'light'}`} href=\"#\" style={myStyle}>{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\" >\r\n                            <a className={`nav-a active text-${props.mode === 'light' ? 'dark' : 'light'}`} style={myStyle} aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className={`nav-a active text-${props.mode === 'light' ? 'dark' : 'light'}`} href=\"/about\" style={myStyle}>About</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\" role=\"search\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input mx-1\" onClick={props.redMode} style={styles} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">DarkRed</label>\r\n                    </div>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input mx-1\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    Heading: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n// Navbar.defaultProps = {\r\n//     title: 'Set Title Here',\r\n//     aboutText: 'Set about here'\r\n// };","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        console.log(\"UpperCase was clicked!\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper case\", \"success\");\r\n    }\r\n    const handlelowClick = () => {\r\n        console.log(\"LowerCase was clicked!\" + text);\r\n        let nText = text.toLowerCase();\r\n        setText(nText);\r\n        props.showAlert(\"Converted to lower case\", \"success\");\r\n    }\r\n    const handleclearTest = () => {\r\n        // console.log(\"LowerCase was clicked!\" + text);\r\n        let nText = \"\";\r\n        setText(nText);\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"OnChange!\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n\r\n    }\r\n    const [text, setText] = useState('');\r\n    // setText(\"new text\");\r\n    return (\r\n        <>\r\n            <div className={`container text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                <h1>{props.Heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"></label>\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'light' ? 'white' : '#343a40', color: props.mode === 'dark' ? 'white' : 'black' }}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handlelowClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleclearTest}>Clear text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>CopyText</button>\r\n            </div>\r\n            <div className={`container my-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                <h2>Your text Summary</h2>\r\n                <p>Your text contains : {text.length} character and {text.split(\" \").length - 1} words.</p>\r\n                <p>{0.008 * text.split(\" \").length} minutes taken to read the data. </p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0 ? text : \"Enter text to preview here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport './App.css';\nimport About from './Components/About';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\nfunction App() {   // function based component \n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#343a40'\n      // showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white'\n      // showAlert(\"Light Mode has been enabled\", \"success\");\n\n    }\n  }\n  const redMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#541212'\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n    }\n  }\n  return ( // can return only one element like here div classname = \"App\" is being returned\n    // if you want to return more than one tags like h1 and div then add <.> and </> at the front and at the end.\n    <>\n      {/* <Router> */}\n      <Navbar title=\"My App\" mode={mode} toggleMode={toggleMode} redMode={redMode} />\n      {/* <Navbar /> */}\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n        {/* <Route exact path=\"/about\" element={<About />}> */}\n        {/* <About aboutText=\"About\" /> */}\n        {/* </Route> */}\n        {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} mode={mode} />}> */}\n        <TextForm showAlert={showAlert} Heading=\"Text Analysis\" mode={mode} />\n        {/* </Route>\n          </Routes> */}\n      </div>\n      {/* </Router> */}\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}